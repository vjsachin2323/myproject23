terraform {
  required_version = ">= 1.5.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = var.aws_region
}

############################
# Variables (safe defaults)
############################
variable "aws_region" {
  description = "AWS region to deploy"
  type        = string
  default     = "ap-south-1"
}

variable "project_name" {
  description = "Tag prefix"
  type        = string
  default     = "hardened-ec2-demo"
}

# Option A (preferred): read hardened AMIs from SSM Parameter Store (String parameters holding AMI IDs)
variable "ssm_param_linux_ami_id" {
  description = "SSM parameter name that stores **Linux hardened AMI ID** (e.g., /golden/linux/ami-id)"
  type        = string
  default     = "/golden/linux/ami-id"
}

variable "ssm_param_windows_ami_id" {
  description = "SSM parameter name that stores **Windows hardened AMI ID** (e.g., /golden/windows/ami-id)"
  type        = string
  default     = "/golden/windows/ami-id"
}

# Option B: override with explicit AMI IDs (takes precedence if non-empty)
variable "override_linux_ami_id" {
  description = "Explicit Linux AMI ID (leave empty to use SSM)"
  type        = string
  default     = ""
}

variable "override_windows_ami_id" {
  description = "Explicit Windows AMI ID (leave empty to use SSM)"
  type        = string
  default     = ""
}

# Networking + access
variable "vpc_cidr" {
  type        = string
  default     = "10.42.0.0/16"
}
variable "public_subnet_cidr" {
  type        = string
  default     = "10.42.1.0/24"
}
variable "open_management_ports" {
  description = "If true, open SSH(22) and RDP(3389) to your IP/CIDR. If false, use SSM Session Manager only."
  type        = bool
  default     = false
}
variable "management_cidr" {
  description = "Your IP/CIDR to allow SSH/RDP from (used only if open_management_ports=true)"
  type        = string
  default     = "0.0.0.0/0"
}

# Instance sizes and names
variable "linux_instance_type" {
  type    = string
  default = "t3.micro"
}
variable "windows_instance_type" {
  type    = string
  default = "t3.medium"
}

locals {
  tags = {
    Project = var.project_name
    Owner   = "platform"
    Stack   = "demo"
  }
}

############################
# Pull AMI IDs (SSM or override)
############################
data "aws_ssm_parameter" "linux_ami" {
  name = var.ssm_param_linux_ami_id
}

data "aws_ssm_parameter" "windows_ami" {
  name = var.ssm_param_windows_ami_id
}

locals {
  linux_ami_id   = length(trim(var.override_linux_ami_id)) > 0 ? var.override_linux_ami_id : data.aws_ssm_parameter.linux_ami.value
  windows_ami_id = length(trim(var.override_windows_ami_id)) > 0 ? var.override_windows_ami_id : data.aws_ssm_parameter.windows_ami.value
}

############################
# Networking
############################
resource "aws_vpc" "this" {
  cidr_block           = var.vpc_cidr
  enable_dns_support   = true
  enable_dns_hostnames = true
  tags                 = merge(local.tags, { Name = "${var.project_name}-vpc" })
}

resource "aws_internet_gateway" "this" {
  vpc_id = aws_vpc.this.id
  tags   = merge(local.tags, { Name = "${var.project_name}-igw" })
}

resource "aws_subnet" "public_a" {
  vpc_id                  = aws_vpc.this.id
  cidr_block              = var.public_subnet_cidr
  map_public_ip_on_launch = true
  availability_zone       = data.aws_availability_zones.available.names[0]
  tags                    = merge(local.tags, { Name = "${var.project_name}-public-a" })
}

data "aws_availability_zones" "available" {
  state = "available"
}

resource "aws_route_table" "public" {
  vpc_id = aws_vpc.this.id
  tags   = merge(local.tags, { Name = "${var.project_name}-public-rt" })
}

resource "aws_route" "public_default" {
  route_table_id         = aws_route_table.public.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.this.id
}

resource "aws_route_table_association" "public_a" {
  subnet_id      = aws_subnet.public_a.id
  route_table_id = aws_route_table.public.id
}

############################
# Security Group
############################
resource "aws_security_group" "instances" {
  name        = "${var.project_name}-sg"
  description = "Managed by Terraform"
  vpc_id      = aws_vpc.this.id

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  dynamic "ingress" {
    for_each = var.open_management_ports ? [1] : []
    content {
      description = "SSH"
      from_port   = 22
      to_port     = 22
      protocol    = "tcp"
      cidr_blocks = [var.management_cidr]
    }
  }

  dynamic "ingress" {
    for_each = var.open_management_ports ? [1] : []
    content {
      description = "RDP"
      from_port   = 3389
      to_port     = 3389
      protocol    = "tcp"
      cidr_blocks = [var.management_cidr]
    }
  }

  tags = merge(local.tags, { Name = "${var.project_name}-sg" })
}

############################
# IAM for SSM (no SSH/RDP needed)
############################
resource "aws_iam_role" "ec2_ssm_role" {
  name               = "${var.project_name}-ec2-ssm-role"
  assume_role_policy = data.aws_iam_policy_document.ec2_trust.json
  tags               = local.tags
}

data "aws_iam_policy_document" "ec2_trust" {
  statement {
    actions = ["sts:AssumeRole"]
    principals {
      type        = "Service"
      identifiers = ["ec2.amazonaws.com"]
    }
  }
}

resource "aws_iam_role_policy_attachment" "ssm_core" {
  role       = aws_iam_role.ec2_ssm_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
}

resource "aws_iam_instance_profile" "ec2_ssm_profile" {
  name = "${var.project_name}-ec2-ssm-profile"
  role = aws_iam_role.ec2_ssm_role.name
}

############################
# User data (minimal hardening-friendly)
############################
locals {
  linux_user_data = <<-EOT
    #!/bin/bash
    set -euo pipefail
    # Ensure SSM agent (most hardened images include it)
    systemctl enable amazon-ssm-agent || true
    systemctl start amazon-ssm-agent || true
  EOT

  windows_user_data = <<-EOT
    <powershell>
    # Ensure SSM Agent service starts
    Start-Service AmazonSSMAgent -ErrorAction SilentlyContinue
    Set-Service AmazonSSMAgent -StartupType Automatic
    </powershell>
  EOT
}

############################
# EC2 Instances
############################
resource "aws_instance" "linux" {
  ami                         = local.linux_ami_id
  instance_type               = var.linux_instance_type
  subnet_id                   = aws_subnet.public_a.id
  associate_public_ip_address = true
  vpc_security_group_ids      = [aws_security_group.instances.id]
  iam_instance_profile        = aws_iam_instance_profile.ec2_ssm_profile.name
  user_data                   = local.linux_user_data

  metadata_options {
    http_tokens = "required"
  }

  tags = merge(local.tags, { Name = "${var.project_name}-linux" })
}

resource "aws_instance" "windows" {
  ami                         = local.windows_ami_id
  instance_type               = var.windows_instance_type
  subnet_id                   = aws_subnet.public_a.id
  associate_public_ip_address = true
  vpc_security_group_ids      = [aws_security_group.instances.id]
  iam_instance_profile        = aws_iam_instance_profile.ec2_ssm_profile.name
  user_data                   = local.windows_user_data

  metadata_options {
    http_tokens = "required"
  }

  tags = merge(local.tags, { Name = "${var.project_name}-windows" })
}

############################
# Outputs
############################
output "linux_instance_id"   { value = aws_instance.linux.id }
output "linux_public_ip"     { value = aws_instance.linux.public_ip }
output "windows_instance_id" { value = aws_instance.windows.id }
output "windows_public_ip"   { value = aws_instance.windows.public_ip }
output "vpc_id"              { value = aws_vpc.this.id }


